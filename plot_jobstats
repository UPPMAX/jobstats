#!/usr/bin/env Rscript

# Read Uppmax jobstats files, analyse resource usage, and produce plots if
# requested.
#
# Latest is available at https://github.com/douglasgscofield/uppmax
#
# TODO:
#
# * decide what to do about multiple-node jobs with respect to produceFlags()
# * set limits below using arguments
# * better documentation
#
# see processArgs() for command-line argument structure

.version <- "2015-02-24"
.debug <- FALSE

# User options
do.flags <- TRUE  # print list of flags to stdout
do.memory <- FALSE  # include flags for memory-caution-only jobs
do.verbose <- FALSE  # produce verbose instead of terse flags

# When to produce flags, for more see produceFlags()
flag_overbooked.fraction <- 0.8
flag_half_overbooked.fraction <- 0.5
flag_severely_overbooked.fraction <- 0.25
flag_cores_overbooked.fraction <- 0.8
flag_mem_overbooked.fraction <- 0.25
flag_core_mem_overbooked.fraction <- 0.5

# Allow table output to be very wide
options(width = 500)

# Basic plot options
do.plot <- TRUE  # produce the plot
do.big.plot <- FALSE  # produce plot with twice the dimensions
col.GB <- "black"
lty.GB <- 1  # memory lines
col.core <- "blue"
lty.core <- 2  # core usage lines
col.swap <- "red"
pch.swap <- 16  # if swap was used
top.lines <- 9  # lines to leave at the top of the plot
main.line <- top.lines - 2  # main. options control the title
main.cex <- 1.7
main.sep <- "  "
user.line <- 1.5  # user. for the user name and project
user.cex <- 1.4
user.adj <- 0.02
axis.cex <- 1.2  # axis1. for x-axis, axis2. for y-axis
axis1.line <- 2.5
axis1.cex <- 1.2
axis2.line <- 4.2
flags.line <- user.line  # flags. for the usage flags
flags.sep <- ",  "
flags.line.sep <- ",\n"
flags.wrap <- 3
flags.col <- "red3"
flags.cex <- 1.2
flags.adj <- 0.98

# When are data sampled, used for producing plots
sampling.plot.offset <- 2.5
sampling.window <- 5

# first column in jobstats file for core usage
first.core.column <- 6

# sizes of available nodes for determining misbooking, sorted in
# increasing mem size
node.types <- list(
    milou          = c(mem128GB = 128, mem256GB = 256, mem512GB = 512), 
    milou.default  = "mem128GB",
    kalkyl         = c(mem24GB = 24, mem48GB = 48, mem72GB = 72), 
    kalkyl.default = "mem24GB", 
    tintin         = c(mem64GB = 64, mem128GB = 128), 
    tintin.default = "mem64GB",
    halvan         = c(halvan = 1024), 
    halvan.default = "halvan")



# process command-line args, note these are order dependent
#
processArgs <- function(args) {
    job <- list()

    # peel off the first args, which specify options
    while ( 1 ) {
        switch(args[1],
            "-n" =, "--no-plot" = { do.plot <<- FALSE; 
                                    args <- args[-1] },
            "-v" =, "--verbose" = { do.verbose <<- TRUE; 
                                    flags.wrap <<- 2; 
                                    args <- args[-1] },
            "-m" =, "--memory"  = { do.memory <<- TRUE;
                                    args <- args[-1] },
            "-c" =, "--cluster" = { job$cluster <- args[2];
                                    args <- args[-c(1, 2)] },
            "-b" =, "--big-plot" = { do.big.plot <<- TRUE; 
                                    args <- args[-1] },
            break)
    }

    # remaining args are either formatted lines (if next arg is --fji or --db)
    # a list of jobstats filenames to read
    
    if (args[1] == "--fji" || args[1] == "--finishedjobinfo") {

        # a finishedjobinfo column-wise set of args as produced by the jobstats
        # Perl script

        job$data_type <- "finishedjobinfo"
        args <- args[-1]

        # jobid cluster jobstate user project jobname endtime runtime flags
        # coresbooked core_list node_list jobstats_file_list
        job$jobid <- as.integer(args[1])
        job$cluster <- if (is.null(job$cluster)) as.character(args[2])
            else job$cluster
        job$jobstate <- as.character(args[3])
        job$user <- as.character(args[4])
        job$project <- as.character(args[5])
        job$jobname <- as.character(args[6])
        job$endtime <- as.character(args[7])
        job$runtime <- as.character(args[8])
        job$initial_flag_list <- if (args[idx <- 9] == ".") character(0)
            else unlist(strsplit(args[idx], ",", fixed = TRUE))
        job$booked <- if (args[idx <- 10] == ".") NA
            else as.integer(args[idx])
        job$core_list <- as.integer(unlist(strsplit(args[11], ",", fixed = TRUE)))
        job$node_list <- unlist(strsplit(args[12], ",", fixed = TRUE))
        job$file_list <- unlist(strsplit(args[13], ",", fixed = TRUE))

    } else if (args[1] == "--slurm") {

        # args as produced by Lennart Karlsson's script slurm.epilog at the end
        # of SLURM jobs.

        job$data_type <- "slurm"
        args <- args[-1]

        # for now act as if it is same as --fji
        #
        # jobid cluster jobstate user project jobname endtime runtime flags
        # coresbooked core_list node_list jobstats_file_list
        job$jobid <- as.integer(args[1])
        job$cluster <- if (is.null(job$cluster)) as.character(args[2])
            else job$cluster
        job$jobstate <- as.character(args[3])
        job$user <- as.character(args[4])
        job$project <- as.character(args[5])
        job$jobname <- as.character(args[6])
        job$endtime <- as.character(args[7])
        job$runtime <- as.character(args[8])
        job$initial_flag_list <- if (args[idx <- 9] == ".") character(0)
            else unlist(strsplit(args[idx], ",", fixed = TRUE))
        job$booked <- if (args[idx <- 10] == ".") NA
            else as.integer(args[idx])
        job$core_list <- as.integer(unlist(strsplit(args[11], ",", fixed = TRUE)))
        job$node_list <- unlist(strsplit(args[12], ",", fixed = TRUE))
        job$file_list <- unlist(strsplit(args[13], ",", fixed = TRUE))

    } else if (args[1] == "--db" || args[1] == "--database") {

        # column-wise set of args as produced by Martin Dahlo's sqlite3
        # database

        job$data_type <- "database"
        args <- args[-1]

        # jobid cluster jobstate user project jobname endtime runtime flags
        # coresbooked core_list node_list jobstats_file_list
        job$jobid <- as.integer(args[1])
        job$cluster <- if (is.null(job$cluster)) as.character(args[2])
            else job$cluster
        job$jobstate <- as.character(args[3])
        job$user <- as.character(args[4])
        job$project <- as.character(args[5])
        job$jobname <- as.character(args[6])
        job$endtime <- as.character(args[7])
        job$runtime <- as.character(args[8])
        job$initial_flag_list <- if (args[idx <- 9] == ".") character(0) 
            else unlist(strsplit(args[idx], ",", fixed = TRUE))
        job$booked <- if (args[idx <- 10] == ".") NA 
            else as.integer(args[idx])
        job$core_list <- as.integer(unlist(strsplit(args[11], ",", fixed = TRUE)))
        job$node_list <- unlist(strsplit(args[12], ",", fixed = TRUE))
        job$file_list <- unlist(strsplit(args[13], ",", fixed = TRUE))

    } else {

        # arguments are a list of jobstats files

        job$data_type <- "file"
        job$cluster <- if (is.null(job$cluster)) "unknown"
            else job$cluster
        job$jobid <- basename(args[1])
        job$file_list <- args
        # dummy up a node list
        job$node_list <- job$file_list

    }

    job$flag_list <- character(0)
    job$data_list <- list()
    return(job)
}



# read jobstats file and fill in data.frame attributes
#
readJobstatsFile <- function(file, node = "unknown") {
    dat <- read.table(file, header = FALSE, skip = 1)
    num.cores <- ncol(dat) - first.core.column + 1
    names(dat) <- c("LOCALTIME", "TIME", "GB_LIMIT", "GB_USED", "GB_SWAP_USED", 
        paste0("core", 1:num.cores))
    attr(dat, "file") <- file
    attr(dat, "node") <- node
    return(dat)
}



# Look at jobstats data.frame (with attributes) to see if there are
# usage patterns that should be flagged
#
produceFlags <- function(dat) {
    
    file <- attr(dat, "file")
    node <- attr(dat, "node")
    cluster <- attr(dat, "cluster")
    
    # Determine resources used

    num.cores <- ncol(dat) - first.core.column + 1
    core.columns <- first.core.column:ncol(dat)
    # Here, we could expand to put in a tolerance for determining whether
    # a core is busy or not
    core.busy.even_once <- function(.busy_list) sum(.busy_list > 0)
    cores.busy <- apply(dat[, core.columns, drop = FALSE], 1, 
                        core.busy.even_once)
    max.cores.busy <- max(cores.busy)
    max.GB.avail <- max(dat$GB_LIMIT)
    max.GB.used <- max(dat$GB_USED)
    swap.used <- any(dat$GB_SWAP_USED > 0)
    core.GB <- max.GB.avail/num.cores
    core.mem.used <- round(max.cores.busy * core.GB, 1)

    # Determine whether resources misused

    flag_overbooked <- FALSE  # some fraction of all booked resources unused
    flag_half_overbooked <- FALSE  # half of all booked resources used
    flag_severely_overbooked <- FALSE  # one-quarter of all booked resources used
    flag_node_type_overbooked <- FALSE  # if on a non-default node, booking was unnecessary
    flag_cores_overbooked <- FALSE  # some cores never used
    flag_mem_overbooked <- FALSE  # max mem used < booked
    flag_core_mem_overbooked <- FALSE  # max mem used < mem in used cores
    
    if (!cluster %in% names(node.types))
        write(paste0(cluster, " missing node types, cannot check if ", 
                     "node_type_overbooked"), stderr())
    else {
        nt <- node.types[[cluster]]
        node.type.booked <- names(nt)[which(max.GB.avail <= nt)[1]]
        node.type.needed <- names(nt)[which(max.GB.used <= nt)[1]]
        if (!length(node.type.booked) || !length(node.type.needed))
            write(paste0(cluster, " missing node types, cannot check if ", 
                        "node_type_overbooked"), stderr())
        else if (node.type.booked != node.type.needed)
            flag_node_type_overbooked <- TRUE
    }
    fraction.cores.used <- max.cores.busy/num.cores
    fraction.mem.used <- max.GB.used/max.GB.avail
    flag_cores_overbooked <- fraction.cores.used < flag_cores_overbooked.fraction
    flag_mem_overbooked <- num.cores > 1 && fraction.mem.used < flag_mem_overbooked.fraction
    flag_core_mem_overbooked <- num.cores > 1 && flag_cores_overbooked && 
        max.GB.used < (core.mem.used * flag_core_mem_overbooked.fraction)
    max.fraction.used <- max(fraction.cores.used, fraction.mem.used)
    flag_overbooked <- max.fraction.used < flag_overbooked.fraction
    flag_half_overbooked <- max.fraction.used < flag_half_overbooked.fraction
    flag_severely_overbooked <- max.fraction.used < flag_severely_overbooked.fraction
    flag_swap_used <- swap.used
    
    include_memory_flag <- do.memory || any(flag_cores_overbooked, flag_half_overbooked, 
        flag_severely_overbooked)
    
    createFlag <- function(avail, used, verbose_msg, msg) {
        if (do.verbose)
            if (is.null(avail)) verbose_msg
            else paste(avail, verbose_msg, "but", used, "used")
        else if (is.null(avail)) msg
            else paste0(msg, ":", avail, ":", used)
    }

    flag_list <- character(0)
    
    if (flag_overbooked) {
        if (do.verbose) 
            flag <- paste0("Just ", round(max.fraction.used * 100, 0),
                           "% of booked core and RAM resources were used")
        else flag <- paste0("overbooked:", round(max.fraction.used * 100, 0), "%")
        flag_list <- c(flag_list, flag)
    }
    
    if (flag_half_overbooked)
        flag_list <- c(flag_list, 
                       createFlag(NULL, NULL, 
                                  "!! Less than half the booked cores and RAM were used",
                                  "!!half_overbooked"))
    
    if (flag_severely_overbooked)
        flag_list <- c(flag_list, 
                       createFlag(NULL, NULL, 
                                  "!! Less than one-quarter the booked cores and RAM were used",
                                  "!!severely_overbooked"))
    
    if (flag_swap_used)
        flag_list <- c(flag_list, 
                       createFlag(NULL, NULL, 
                                  "!! Swap space was sued",
                                  "!!swap_used"))
    
    if (flag_node_type_overbooked)
        flag_list <- c(flag_list,
                       createFlag(node.type.booked,
                                  ifelse(do.verbose, 
                                         paste("resources of a", node.type.needed, "were"),
                                         node.type.needed),
                                  "node was booked",
                                  "node_type_overbooked"))
    
    if (flag_cores_overbooked)
        flag_list <- c(flag_list,
                       createFlag(num.cores, max.cores.busy,
                                  "cores booked", "cores_overbooked"))
    
    if (flag_mem_overbooked && include_memory_flag)
        flag_list <- c(flag_list,
                       createFlag(max.GB.avail, max.GB.used,
                                  "GB RAM available in booked cores",
                                  "mem_overbooked"))
    
    if (flag_core_mem_overbooked && include_memory_flag)
        flag_list <- c(flag_list, 
                       createFlag(core.mem.used, max.GB.used,
                                  "GB RAM available in used cores", 
                                  "core_mem_overbooked"))
    
    return(flag_list)
}



# Form filename for plot
#
plotFilename <- function(job) {
    p <- ifelse(job$project == ".", "noproj", job$project)
    u <- ifelse(job$user == ".", "nouser", job$user)
    paste0(paste(sep = "-", job$cluster, p, u, job$jobid), 
        ".png")
}



# Plot a full set of jobstats panels.  Could be just 1
#
plotJobstats <- function(job, do.png = TRUE) {
    
    # calculate plot size and layout
    n.panels <- length(job$node_list)
    n.jobstats <- length(names(job$data_list))
    if (.debug) 
        cat("n.panels =", n.panels, " n.jobstats =", n.jobstats, "\n")
    
    n.columns <- if (n.panels > 1) 2 else 1
    n.rows <- if (n.panels > 1) as.integer(n.panels/2 + 0.5) else 1
    if (.debug) 
        cat("n.columns =", n.columns, " n.rows =", n.rows, "\n")
    width <- 800
    top.height <- 200
    panel.height <- switch(as.character(n.panels), 
                           "1" = 500, "2" = 250, n.rows * 250)
    height <- top.height + panel.height
    if (do.big.plot) {
        width <- width * 2
        height <- height * 2
    }
    if (.debug) 
        cat("width =", width, " height =", height, "\n")

    if (do.png) 
        png(plotFilename(job), width = width, height = height)
    
    opa <- par(no.readonly = TRUE)
    par(mfrow = c(n.rows, n.columns), oma = c(0, 0, top.lines, 0))
    # plot the individual panels for the nodes for which we have data
    for (i in seq_along(names(job$data_list))) {
        this.row <- ifelse(n.panels == 1, 0, as.integer(i/2 + 0.5))
        this.col <- ifelse(n.panels == 1, 0, ifelse(i%%2, 1, 2))
        n <- names(job$data_list)[i]
        plotJobstatsPanel(job$data_list[[n]], n, this.row, this.col)
    }
    if (n.panels > n.jobstats) {
        # now plot the individual panels for the unused nodes
        for (n in job$node_list[(n.jobstats + 1):n.panels]) {
            plot.new()
            plot.window(xlim = c(0, 1), ylim = c(0, 1))
            text(0.5, 0.5, paste0("Node ", n, " booked but unused"))
        }
    }
    
    # Header lines: top line: jobid jobstate cluster endtime runtime
    txt <- paste(job$jobid, job$jobstate, "on", job$cluster)
    if (!is.null(job$endtime) && job$endtime != ".") 
        txt <- paste(sep = main.sep, txt, paste("end:", job$endtime))
    if (!is.null(job$runtime) && job$runtime != ".") 
        txt <- paste(sep = main.sep, txt, paste("runtime:", job$runtime))
    mtext(txt, font = 2, cex = main.cex, line = main.line, side = 3, outer = TRUE)
    
    if (n.rows > 2) {
        user.line <- user.line - 1
        flags.line <- flags.line - 1
    }
    
    # User, project and jobname lines
    txt <- paste0("User: ", job$user, "\n", "Proj: ", job$project, "\n", 
        "Jobname: ", job$jobname)
    mtext(txt, font = 2, cex = user.cex, line = user.line, side = 3, adj = user.adj, 
        outer = TRUE)
    
    # Flags in red Flags passed in job$initial_flag_list, flags determined
    # here job$flag_list
    flags.output <- character(0)
    flags.list <- c(job$initial_flag_list, job$flag_list)
    flags.count <- length(flags.list)
    if (flags.count == 0) {
        flags.output <- "Flags: none"
    } else if (flags.count <= flags.wrap) {
        flags.output <- paste(collapse = flags.sep, flags.list)
    } else {
        flags.output <- paste(collapse = flags.sep, flags.list[1:flags.wrap])
        i <- flags.wrap + 1
        while ((i + flags.wrap - 1) <= flags.count) {
            j <- i + flags.wrap - 1
            flags.output <- paste(sep = flags.line.sep, flags.output, paste(collapse = flags.sep, 
                flags.list[i:j]))
            i <- i + flags.wrap
        }
        if (i <= flags.count) {
            flags.output <- paste(sep = flags.line.sep, flags.output, paste(collapse = flags.sep, 
                flags.list[i:flags.count]))
        }
    }
    # txt = paste(flags.output)
    mtext(flags.output, font = 1, cex = flags.cex, line = flags.line, side = 3, 
        outer = TRUE, col = flags.col, adj = flags.adj)
    par(opa)
    
    if (do.png) 
        graphics.off()
}



# Plot a single jobstats panel
#
plotJobstatsPanel <- function(dat, node = "unknown", this.row = 0, this.col = 0) {
    
    if (.debug)
        cat('this.row = ', this.row, ' this.col = ', this.col, '\n')
    
    num.cores <- ncol(dat) - first.core.column + 1
    core.columns <- first.core.column:ncol(dat)
    
    # set up plot extents based on resource availability
    
    range.GB <- c(0, dat[1, "GB_LIMIT"])  # GB_LIMIT fixed for job duration
    range.cores <- c(0, num.cores * 100)
    swap.y <- range.GB[2]
    # set up traces based on resource usage, 5 minute sampling times
    dat$x <- ((dat$TIME - dat$TIME[1]) / 60) + sampling.plot.offset
    range.x <- c(0, max(ceiling(dat$x + sampling.window - sampling.plot.offset)))
    core.at <- seq(range.cores[1], range.cores[2], by = 100)
    core.labels <- paste0(as.character(core.at), "%")
    core.to.GB <- function(.x) return((.x/range.cores[2]) * range.GB[2])
    core.at <- core.to.GB(core.at)
    dat$core_ <- core.to.GB(apply(dat[, core.columns, drop = FALSE], 1, 
        sum))
    dat$swap_ <- ifelse(dat$GB_SWAP_USED > 0, swap.y, NA)

    # if just one entry, then give it some body by doubling it to make a line
    if (nrow(dat) == 1) {
        dat <- rbind(dat, dat)
        dat$x[1] <- 0  # reset left x
        dat$x[2] <- sampling.window  # reset right x
    }

    par(mar = c(4, 4, 3, 5.5), las = 1, mgp = c(2.6, 0.5, 0), tcl = -0.4)

    with(dat, plot(x, GB_USED, xlim = range.x, ylim = range.GB, col = col.GB, 
                   type = "l", lwd = 2, lty = lty.GB, bty = "U", main = node, 
                   cex.main = 1.5, xlab = "", ylab = "", cex.axis = axis.cex))
    mtext(paste0("Wall minutes since job start (5 min resolution, max ", range.x[2], " min)"),
          side = 1, line = axis1.line, las = 0, col = col.GB, cex = axis1.cex)
    mtext(ifelse(this.col <= 1, paste0("GB used (max ", range.GB[2], " GB)"), ""),
          side = 2, line = axis1.line, las = 0, col = col.GB, cex = axis1.cex)
    with(dat, lines(x, core_, col = col.core, lwd = 2, lty = lty.core))
    axis(4, at = core.at, labels = core.labels, col.axis = col.core, cex.axis = axis.cex)

    if (this.col %in% c(0, 2)) # multiplanel axes
        mtext(paste0("Core busy for ", num.cores, " cores (max ", 
                     num.cores * 100, "%)"), 
              side = 4, line = axis2.line, las = 0, col = col.core, 
              cex = axis.cex)

    # If swap used, plot points and legend
    if (any(!is.na(dat$swap_))) {
        with(dat, points(x, swap_, pch = 16, col = "red"))
        legend("topleft", legend = "Swap\nused", bty = "n", pch = pch.swap, 
               col = col.swap, text.col = col.swap)
    }
}



# collect contents of all jobstats files, produce summaries and flag lists
#
gatherAllJobstats <- function(job) {
    for (i in 1:length(job$file_list)) {
        node <- job$node_list[i]
        job$data_list[[node]] <- readJobstatsFile(job$file_list[i], node)
        attr(job$data_list[[node]], "cluster") <- job$cluster
    }
    job$swap_used <- any(unlist(lapply(job$data_list, function(x) any(x$GB_SWAP_USED > 
        0))))
    job$flag_list <- produceFlags(job$data_list[[1]])
    return(job)
}



# MAIN
#
args <- commandArgs(trailingOnly = TRUE)

if (.debug) { cat("after commandArgs()\n"); print(args) }

job <- processArgs(args)

if (.debug) { cat("after processArgs()\n"); print(job) }

job <- gatherAllJobstats(job)

if (.debug) { cat("after gatherAllJobstats()\n"); print(job) }

# flags to stdout
if (do.flags)
    write(paste(collapse = ",", job$flag_list), stdout())

if (do.plot)
    plotJobstats(job)

